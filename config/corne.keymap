#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "zmk-helpers/helper.h"

#define BASE 0
#define NUM 1
#define SYM 2
#define NAV 3
#define FUN 4
#define META 5
#define BGAME 6
#define NGAME 7
#define FGAME 8

	/* Magic-shift & auto-layers */
	#define QUICK_TAP_MS 175
	// Tap: repeat after alpha, else sticky-shift |
	// Shift + tap/ double-tap: caps-word | Hold: shift.
	#define MAGIC_SHIFT &magic_shift LSHFT 0
	ZMK_HOLD_TAP(magic_shift, bindings = <&kp>, <&magic_shift_tap>;
				 flavor = "balanced"; tapping-term-ms = <200>;
				 quick-tap-ms = <QUICK_TAP_MS>;)
	ZMK_MOD_MORPH(magic_shift_tap, bindings = <&shift_repeat>, <&caps_word>;
				  mods = <(MOD_LSFT)>;)
	ZMK_ADAPTIVE_KEY(
		shift_repeat, bindings = <&sk LSHFT>;
		repeat {
			trigger-keys = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
			bindings = <&key_repeat>;
			max-prior-idle-ms = <1200>;
			strict-modifiers;
		};)
	&caps_word { // Mods deactivate caps-word, requires PR #1451. [TODO: rebase]
		/delete-property/ ignore-modifiers;
	};
	
/ {
	combos {
		compatible = "zmk,combos";
		combo_tog_BGAME {
			timeout-ms = <50>;
			require-prior-idle-ms = <150>;
			key-positions = <13 14 15 16>;
			bindings = <&tog BGAME>;
		};
	};
	
	behaviors {
		spc_bspc: space_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp BSPC>;
            mods = <MOD_LSFT>;
        };
    };			
};

/ {
        keymap {
                compatible = "zmk,keymap";

                base_layer {
                        display-name = "Base";
                        bindings = <
	&kp LALT &kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P &kp RALT
	&kp LSHFT &kp A &kp S &kp D &kp F &kp G &kp H &kp J &kp K &kp L &kp SEMI &kp RSHFT
	&kp LCTRL &kp Z &kp X &kp C &kp V &kp B &kp N &kp M &kp COMMA &kp DOT &kp SQT &kp RCTRL
    &lt NAV ESC &lt NUM TAB &sp_bspc MAGIC_SHIFT &lt SYM RET &lt FUN DEL
                        >;
                };
                number_layer {
                        display-name = "Num";
                        bindings = <
	&none &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_N0 &none
	&none &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &none
	&none &none &kp GRAVE &kp BSLH &kp EQUAL &none &none &kp MINUS &kp FSLH &kp LBKT &kp RBKT &none
	&to BGAME &trans &trans &trans &trans &trans
                        >;
                };
                symbol_layer {
                        display-name = "Sym";
                        bindings = <
	&none &none &none &none &none &none &none &none &none &none &none &none
	&none &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT &kp CARET &kp AMPS &kp STAR &kp LPAR &kp RPAR &none
	&none &none &kp TILDE &kp PIPE &kp PLUS &none &none &kp UNDER &kp QMARK &kp LBRC &kp RBRC &none
	&trans &trans &trans &trans &trans &to NAV 
                        >;
                };
				navigation_layer {
                        display-name = "Nav";
                        bindings = <
	&none &kp KP_SLASH &kp KP_MINUS &kp KP_PLUS &kp KP_MULTIPLY &none &none &kp KP_N7 &kp KP_N8 &kp KP_N9 &none &none
	&none &kp LEFT &kp DOWN &kp UP &kp RIGHT &kp DEL &kp KP_DOT &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_N0 &none
	&none &kp HOME &kp PG_DN &kp PG_UP &kp END &kp INS &none &kp KP_N1 &kp KP_N2 &kp KP_N3 &none &none
	&to BASE &trans &trans &trans &trans &trans
                        >;				
                };
				function_layer {
                        display-name = "Fun";
                        bindings = <
	&none &kp F1 &kp F2 &kp F3 &kp F4 &kp C_NEXT &kp C_VOL_UP &kp F13 &kp F14 &kp F15 &kp F16 &none
	&none &kp F5 &kp F6 &kp F7 &kp F8 &kp C_PP &kp C_MUTE &kp F17 &kp F18 &kp F19 &kp F20 &none
	&none &kp F9 &kp F10 &kp F11 &kp F12 &kp C_PREV &kp C_VOL_DN &kp F21 &kp F22 &kp F23 &kp F24 &none
	&trans &trans &trans &trans &trans &trans
                        >;
                };				
				meta_layer {
                        display-name = "Meta";
                        bindings = <
	&none &none &none &none &none &none &none &none &none &none &none &none 
	&none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &none &none &bt BT_SEL 4 &out OUT_BLE &out OUT_USB &bt BT_CLR &none
	&none &none &none &none &none &none &none &none &none &none &none &none
	&trans &trans &trans &trans &trans &trans
                        >;
				};
				game_base_layer {
                        display-name = "Game";
                        bindings = <
	&none &kp LALT &kp Q &kp S &kp E &kp R &kp Y &kp U &kp I &kp O &kp P &none
	&none &kp LSHFT &kp A &kp W &kp D &kp F &kp H &kp J &kp K &kp L &kp SEMI &none
	&none &kp LCTRL &kp Z &kp X &kp C &kp V &kp N &kp M &kp COMMA &kp DOT &kp FSLH &none
	&lt FGAME ESC &lt NGAME TAB &kp SPACE &kp BSPC &kp RGUI &kp PSCRN
                        >;
				};
				game_number_layer {
                        display-name = "Meta";
                        bindings = <
	&none &kp N1 &kp N2 &kp DOWN &kp N3 &kp N4 &none &none &none &none &none &none
	&none &kp RET &kp LEFT &kp UP &kp RIGHT &kp N5 &none &none &none &none &none &none
	&none &kp N0 &kp N9 &kp N8 &kp N7 &kp N6 &none &none &none &none &none &none
	&to BASE &trans &kp TAB &none &none &none
                        >;
				};
				game_function_layer {
                        display-name = "Meta";
                        bindings = <
	&none &kp F1 &kp F2 &kp F3 &kp F4 &kp F21 &none &none &none &none &none &none
	&none &kp F5 &kp F6 &kp F7 &kp F8 &kp F22 &none &none &none &none &none &none
	&none &kp F9 &kp F10 &kp F11 &kp F12 &kp F23 &none &none &none &none &none &none
	&trans &kp F24 &kp ESC &none &none &none
                        >;
				};	
        };
};