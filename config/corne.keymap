#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NUM 1
#define NAV 2
#define FUN 3
#define SYS 4
#define GAME 5
#define GUN 6

#define XXX &none
#define ___ &trans

#define SMART_NUM &smart_num NUM NUM
#define SMART_NAV &smart_nav NAV NAV

&sk {
	release-after-ms = <1000>;
	quick-release;
};

&sl {
	release-after-ms = <1000>;
};

&caps_word {
	continue-list = <UNDER MINUS SQT DEL BSPC>;
};
	
/ {
    macros {
        cut: CTRL_X {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp X>
                , <&macro_release &kp LCTRL>
                ;
        };
        copy: CTRL_C {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp C>
                , <&macro_release &kp LCTRL>
                ;
        };
        paste: CTRL_V {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp V>
                , <&macro_pause_for_release>
                , <&macro_release &kp LCTRL &kp V>
                ;
        };
        top_doc: CTRL_HOME {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp HOME>
                , <&macro_release &kp LCTRL>
                ;
        };
		bot_doc: CTRL_END {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp END>
                , <&macro_release &kp LCTRL>
                ;
		};
		prev_word: CTRL_LEFT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LEFT>
                , <&macro_pause_for_release>
                , <&macro_release &kp LCTRL &kp LEFT>
                ;
		};
		next_word: CTRL_RIGHT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp RIGHT>
                , <&macro_pause_for_release>
                , <&macro_release &kp LCTRL &kp RIGHT>
                ;
		};
	};
	
	behaviors {
		num_word: num_word {
			compatible = "zmk,behavior-auto-layer";
			#binding-cells = <1>;
			continue-list = <KP_N1 KP_N2 KP_N3 KP_N4 KP_N5 KP_N6 KP_N7 KP_N8 KP_N9 KP_N0 N1 N2 N3 N4 N5 N6 N7 N8 N9 N0	\
							 KP_MINUS KP_PLUS KP_DIVIDE KP_MULTIPLY KP_ENTER KP_DOT 	 TAB ENTER COMMA DEL BSPC>;
			ignore-modifiers;
		};
		smart_num: number_layer_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
			bindings = <&mo>, <&num_word>;
		};
		nav_word: nav_word {
			compatible = "zmk,behavior-auto-layer";
			#binding-cells = <1>;
			continue-list = <LEFT DOWN UP RIGHT PG_DN PG_UP HOME END TAB ENTER DEL BSPC SPACE>;
			ignore-modifiers;
		};
		smart_nav: navigation_layer_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
			bindings = <&mo>, <&nav_word>;
		};
		lscw: leftshift_capsword {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		rscw: rightshift_capsword {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk RSHFT>, <&caps_word>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		cosc: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		doco: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		quex: question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		eqti: equal_tilde {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp EQUAL >, <&kp TILDE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		slpe: slash_percent {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp PRCNT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		bsgr: backslash_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSLH>, <&kp GRAVE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		hast: hash_star {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp HASH>, <&kp STAR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		usca: underscore_caret {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp UNDER>, <&kp CARET>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		lplb: leftparenthesis_leftbracket {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp LBKT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		rprb: rightparenthesis_rightbracket {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp RBKT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		mipl: minus_plus {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp MINUS>, <&kp PLUS>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		asat: ampersand_at {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp AT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		ltlb: lessthan_leftbrace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LT>, <&kp LBRC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		gtrb: greaterthan_rightbrace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp GT>, <&kp RBRC>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		pido: pipe_dollar {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp PIPE>, <&kp DLLR>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

	combos {
		compatible = "zmk,combos";
		combo_equal_tilde {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <2 3>;
			layers = <BASE NUM FUN>;
			bindings = <&eqti>;
		};
		combo_slash_percent {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <3 4>;
			layers = <BASE NUM FUN>;
			bindings = <&slpe>;
		};
		combo_backslash_grave {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <7 8>;
			layers = <BASE NUM FUN>;
			bindings = <&bsgr>;
		};
		combo_hash_star {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <8 9>;
			layers = <BASE NUM FUN>;
			bindings = <&hast>;
		};
		combo_underscore_caret {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <14 15>;
			layers = <BASE NUM FUN>;
			bindings = <&usca>;
		};
		combo_leftparenthesis_leftbracket {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <15 16>;
			layers = <BASE NUM FUN>;
			bindings = <&lplb>;
		};
		combo_rightparenthesis_rightbracket {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <19 20>;
			layers = <BASE NUM FUN>;
			bindings = <&rprb>;
		};
		combo_minus_plus {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <20 21>;
			layers = <BASE NUM FUN>;
			bindings = <&mipl>;
		};
		combo_ampersand_at {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <26 27>;
			layers = <BASE NUM FUN>;
			bindings = <&asat>;
		};
		combo_lessthan_leftbrace {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <27 28>;
			layers = <BASE NUM FUN>;
			bindings = <&ltlb>;
		};
		combo_greaterthan_rightbrace {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <31 32>;
			layers = <BASE NUM FUN>;
			bindings = <&gtrb>;
		};
		combo_pipe_dollar {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <32 33>;
			layers = <BASE NUM FUN>;
			bindings = <&pido>;
		};
		combo_function_layer {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <37 40>;
			layers = <BASE NUM NAV FUN>;
			bindings = <&sl FUN>;
		};
		combo_system_layer {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <38 39>;
			layers = <BASE NUM NAV FUN>;
			bindings = <&mo SYS>;
		};
		combo_game_layer {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <3 14 16 25>;
			layers = <BASE NUM NAV FUN>;
			bindings = <&to GAME>;
		};
		combo_left_control {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <16 38>;
			layers = <BASE NUM NAV FUN>;
			bindings = <&sk LCTRL>;
		};
		combo_right_control {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <19 39>;
			layers = <BASE NUM NAV FUN>;
			bindings = <&sk RCTRL>;
		};
		combo_left_shift {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <15 38>;
			layers = <BASE NUM NAV FUN>;
			bindings = <&lscw>;
		};
		combo_right_shift {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <20 39>;
			layers = <BASE NUM NAV FUN>;
			bindings = <&rscw>;
		};
		combo_caps_lock {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <15 20 38 39>;
			layers = <BASE NUM NAV FUN>;
			bindings = <&kp CAPS>;
		};
		combo_left_alt {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <14 38>;
			layers = <BASE NUM NAV FUN>;
			bindings = <&sk LALT>;
		};
		combo_right_alt {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <21 39>;
			layers = <BASE NUM NAV FUN>;
			bindings = <&sk RALT>;
		};
		combo_left_gui {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <13 38>;
			layers = <BASE NUM NAV FUN>;
			bindings = <&sk LGUI>;
		};
		combo_right_gui {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <22 39>;
			layers = <BASE NUM NAV FUN>;
			bindings = <&sk RGUI>;
		};
		combo_cut {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <2 4>;
			layers = <BASE NUM NAV FUN>;
			bindings = <&cut>;
		};
		combo_copy {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <14 16>;
			layers = <BASE NUM NAV FUN>;
			bindings = <&copy>;
		};
		combo_paste {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <26 28>;
			layers = <BASE NUM NAV FUN>;
			bindings = <&paste>;
		};
		combo_escape {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <7 9>;
			layers = <BASE NUM NAV FUN>;
			bindings = <&kp ESC>;
		};
		combo_tab {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <19 21>;
			layers = <BASE NUM NAV FUN>;
			bindings = <&kp TAB>;
		};
		combo_enter {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <31 33>;
			layers = <BASE NUM NAV FUN>;
			bindings = <&kp ENTER>;
		};
		combo_base_layer_left {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <13 14 15 16>;
			layers = <NUM NAV FUN GAME GUN>;
			bindings = <&to BASE>;
		};
		combo_base_layer_right {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <19 20 21 22>;
			layers = <NUM NAV FUN GAME GUN>;
			bindings = <&to BASE>;
		};
		combo_game_escape {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <3 14 16>;
			layers = <GAME GUN>;
			bindings = <&kp ESC>;
		};
		combo_game_left_gui {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <14 15 16>;
			layers = <GAME GUN>;
			bindings = <&kp LGUI>;
		};
	};
};

/ {
        keymap {
                compatible = "zmk,keymap";
                base_layer {
                        display-name = "Base";
                        bindings = <
	XXX &kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P XXX
	XXX &kp A &kp S &kp D &kp F &kp G &kp H &kp J &kp K &kp L &kp SQT XXX
	XXX &kp Z &kp X &kp C &kp V &kp B &kp N &kp M &cosc &doco &quex XXX
    XXX SMART_NAV &kp BSPC &kp SPACE SMART_NUM XXX
                        >;
                };
				number_layer {
                        display-name = "Num";
                        bindings = <
	XXX XXX &kp N7 &kp N8 &kp N9 &kp KP_MINUS &kp KP_PLUS &kp KP_N7 &kp KP_N8 &kp KP_N9 XXX XXX
	XXX &kp N0 &kp N4 &kp N5 &kp N6 &kp DEL &kp KP_ENTER &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_N0 XXX
	XXX &kp COMMA &kp N1 &kp N2 &kp N3 &kp KP_DIVIDE &kp KP_MULTIPLY &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_DOT XXX
	XXX ___ ___ ___ &to BASE XXX
                        >;				
                };
				navigation_layer {
                        display-name = "Nav";
                        bindings = <
	XXX XXX &kp PG_UP &kp UP &kp PG_DN XXX XXX &msc SCRL_UP &mmv MOVE_UP &msc SCRL_DOWN XXX XXX
	XXX &kp HOME &kp LEFT &kp DOWN &kp RIGHT &kp END &msc SCRL_LEFT &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &msc SCRL_RIGHT XXX
	XXX &top_doc &prev_word &kp DEL &next_word &bot_doc &mkp MB4 &mkp MB1 &mkp MB3 &mkp MB2 &mkp MB5 XXX
	XXX &to BASE ___ ___ SMART_NUM XXX
                        >;
                };
				function_layer {
                        display-name = "Fun";
                        bindings = <
	XXX &kp F9 &kp F10 &kp F11 &kp F12 XXX XXX &kp F21 &kp F22 &kp F23 &kp F24 XXX
	XXX &kp F5 &kp F6 &kp F7 &kp F8 XXX XXX &kp F17 &kp F18 &kp F19 &kp F20 XXX
	XXX &kp F1 &kp F2 &kp F3 &kp F4 XXX XXX &kp F13 &kp F14 &kp F15 &kp F16 XXX
	XXX ___ ___ ___ &to BASE XXX
                        >;
				};				
				system_layer {
                        display-name = "Sys";
                        bindings = <
	XXX &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 XXX XXX &bt BT_SEL 4 &out OUT_BLE &out OUT_USB &bt BT_CLR XXX
	XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX
	XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX
	XXX XXX XXX XXX XXX XXX
                        >;
				};
                game_layer {
                        display-name = "Game";
                        bindings = <
	XXX &kp TAB &kp Q &kp W &kp E &kp R &kp Y &kp U &kp I &kp O &kp P XXX
	XXX &kp LCTRL &kp A &kp S &kp D &kp F &kp H &kp J &kp K &kp L &kp SEMI XXX
	XXX &kp LSHFT &kp Z &kp X &kp C &kp V &kp N &kp M &kp COMMA &kp DOT &kp SLASH XXX
	XXX &sl GUN &kp SPACE &kp BSPC XXX XXX
                        >;
                };
                game_function_layer {
                        display-name = "Gun";
                        bindings = <
	XXX &kp F9 &kp F10 &kp F11 &kp F12 &kp F22 XXX XXX XXX XXX XXX XXX
	XXX &kp F5 &kp F6 &kp F7 &kp F8 &kp F23 XXX XXX XXX XXX XXX XXX
	XXX &kp F1 &kp F2 &kp F3 &kp F4 &kp F24 XXX XXX XXX XXX XXX XXX
	XXX &kp LALT &kp ENTER XXX XXX XXX
                        >;
                };
		};
};