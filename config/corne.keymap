#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define FUN 1
#define NAV 2
#define SYM 3
#define NUM 4
#define SYS 5
#define GAME 6
#define GUN 7

#define XXX &none
#define ___ &trans

#define SMART_NUM &smart_num NUM NUM
#define SMART_NAV &smart_nav NAV NAV

&sk {
	release-after-ms = <1000>;
	quick-release;
};

&sl {
	release-after-ms = <1000>;
};
	
/ {
	behaviors {
		smart_num: number_layer_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
			bindings = <&mo>, <&num_word>;
		};
		nav_word: nav_word {
			compatible = "zmk,behavior-auto-layer";
			#binding-cells = <1>;
			continue-list = <LEFT DOWN UP RIGHT PG_DN PG_UP HOME END>;
			ignore-modifiers;
		};
		smart_nav: navigation_layer_hold_tap {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
			bindings = <&mo>, <&nav_word>;
		};
		mota: mod_tap {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
			quick-tap-ms = <200>;
			retro-tap;
			bindings = <&kp>, <&kp>;
		};
		lshicap: left_stickyshift_capsword {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		rshicap: right_stickyshift_capsword {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk RSHFT>, <&caps_word>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		comsem: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		dotcol: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		queexc: question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
	
    macros {
        copy: CTRL_C {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp C>
                , <&macro_release &kp LCTRL>
                ;
        };
        paste: CTRL_V {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp V>
                , <&macro_release &kp LCTRL>
                ;
        };
        cut: CTRL_X {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp X>
                , <&macro_release &kp LCTRL>
                ;
        };	
        undo: CTRL_Z {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp Z>
                , <&macro_release &kp LCTRL>
                ;
        };
        find: CTRL_F {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp F>
                , <&macro_release &kp LCTRL>
                ;
        };
        redo: CTRL_Y {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp Y>
                , <&macro_release &kp LCTRL>
                ;
        };
        top_doc: CTRL_HOME {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp HOME>
                , <&macro_release &kp LCTRL>
                ;
        };
		bottom_doc: CTRL_END {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp END>
                , <&macro_release &kp LCTRL>
                ;
		};
		prev_word: CTRL_LEFT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp LEFT>
                , <&macro_release &kp LCTRL>
                ;
		};
		next_word: CTRL_RIGHT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp RIGHT>
                , <&macro_release &kp LCTRL>
                ;
		};
	};

	combos {
		compatible = "zmk,combos";	
		combo_to_base_layer {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <13 14 15 16>;
			layers = <GAME>;
			bindings = <&to BASE>;
		};
		combo_to_game_layer {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <3 14 16 25>;
			layers = <BASE>;
			bindings = <&to GAME>;
		};
		combo_copy {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <2 4>;
			layers = <BASE NUM NAV>;
			bindings = <&copy>;
		};
		combo_paste {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <14 16>;
			layers = <BASE NUM NAV>;
			bindings = <&paste>;
		};
		combo_cut {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <26 28>;
			layers = <BASE NUM NAV>;
			bindings = <&cut>;
		};
		combo_undo {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <7 9>;
			layers = <BASE NUM NAV>;
			bindings = <&undo>;
		};
		combo_find {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <19 21>;
			layers = <BASE NUM NAV>;
			bindings = <&find>;
		};
		combo_redo {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <31 33>;
			layers = <BASE NUM NAV>;
			bindings = <&redo>;
		};
	};
};

/ {
        keymap {
                compatible = "zmk,keymap";
                base_layer {
                        display-name = "Base";
                        bindings = <
	&mota LALT TAB &kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P &mota RALT ESC
	&mota LCTRL DEL &kp A &kp S &kp D &kp F &kp G &kp H &kp J &kp K &kp L &kp SQT &mota RCTRL RET
	&lshicap &kp Z &kp X &kp C &kp V &kp B &kp N &kp M &comsem &dotcol &queexc &rshicap
    SMART_NAV SMART_NUM &kp BSPC &kp SPACE &sl SYM &sl FUN
                        >;
                };
				function_layer {
                        display-name = "Fun";
                        bindings = <
	___ &kp F1 &kp F2 &kp F3 &kp F4 XXX XXX &kp F13 &kp F14 &kp F15 &kp F16 ___ 
	___ &kp F5 &kp F6 &kp F7 &kp F8 XXX XXX &kp F17 &kp F18 &kp F19 &kp F20 ___
	___ &kp F9 &kp F10 &kp F11 &kp F12 XXX XXX &kp F21 &kp F22 &kp F23 &kp F24 ___
	&mo SYS ___ ___ ___ ___ ___
                        >;
				};
				navigation_layer {
                        display-name = "Nav";
                        bindings = <
	___ XXX &kp PG_UP &kp UP &kp PG_DN XXX XXX &msc SCRL_UP &mmv MOVE_UP &msc SCRL_DOWN XXX ___
	___ &kp HOME &kp LEFT &kp DOWN &kp RIGHT &kp END &msc SCRL_LEFT &mmv MOVE_LEFT &mmv MOVE_DOWN &mmv MOVE_RIGHT &msc SCRL_RIGHT ___
	___ XXX XXX &kp PSCRN XXX XXX &mkp MB4 &mkp MB1 &mkp MB3 &mkp MB2 &mkp MB5 ___
	___ ___ ___ ___ ___ &mo SYS
                        >;
                };				
				symbol_layer {
                        display-name = "Sym";
                        bindings = <
	___ &kp GRAVE &kp DLLR &kp AT &kp HASH XXX XXX &kp PIPE &kp PRCNT &kp CARET &kp TILDE ___
	___ &kp LBRC &kp LT &kp MINUS &kp UNDER XXX XXX &kp AMPS &kp EQUAL &kp GT &kp RBRC ___
	___ &kp LBKT &kp LPAR &kp STAR &kp FSLH XXX XXX &kp BSLH &kp PLUS &kp RPAR &kp RBKT ___
	___ &kp LGUI ___ ___ ___ ___
                        >;
				};
				number_layer {
                        display-name = "Num";
                        bindings = <
	___ XXX &kp N1 &kp N2 &kp N3 XXX XXX &kp KP_N1 &kp KP_N2 &kp KP_N3 XXX ___
	___ &kp N0 &kp N4 &kp N5 &kp N6 &kp KP_MINUS &kp KP_PLUS &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_N0 &mota KP_ENTER
	___ &kp COMMA &kp N7 &kp N8 &kp N9 &kp KP_SLASH &kp KP_MULTIPLY &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_DOT ___
	___ ___ ___ ___ &kp RGUI ___
                        >;				
                };
				system_layer {
                        display-name = "Sys";
                        bindings = <
	XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX
	XXX &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 XXX XXX &bt BT_SEL 4 &out OUT_BLE &out OUT_USB &bt BT_CLR XXX
	XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX
	___ XXX XXX XXX XXX ___
                        >;
				};
                game_layer {
                        display-name = "Game";
                        bindings = <
	&kp ESC &kp T &kp Q &kp W &kp E &kp R &kp Y &kp U &kp I &kp O &kp P XXX
	&kp TAB &kp G &kp A &kp S &kp D &kp F &kp H &kp J &kp K &kp L &kp SEMI XXX
	&kp LCTRL &kp LSHFT &kp Z &kp X &kp C &kp V &kp N &kp M &kp COMMA &kp DOT &kp FSLH XXX
	&mo GUN &kp LALT &kp SPACE &kp B XXX XXX
                        >;
                };
                game_function_layer {
                        display-name = "Gun";
                        bindings = <
	&kp PSCRN &kp F1 &kp F2 &kp F3 &kp F4 &kp F21 XXX XXX XXX XXX XXX XXX
	&kp LGUI &kp F5 &kp F6 &kp F7 &kp F8 &kp F22 XXX XXX XXX XXX XXX XXX
	&kp F24 &kp F9 &kp F10 &kp F11 &kp F12 &kp F23 XXX XXX XXX XXX XXX XXX
	___ ___ XXX XXX XXX XXX
                        >;
                };
		};
};