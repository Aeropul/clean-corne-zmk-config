#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NUM 1
#define NAV 2
#define FUN 3
#define MAC 4
#define SYS 5
#define GAME 6
#define GFUN 7

#define XXX &none
#define ___ &trans

&sk {
	release-after-ms = <1000>;
	quick-release;
	ignore-modifiers;
};
	
/ {
	conditional_layers {
		compatible = "zmk,conditional-layers";
		tri_layer {
			if-layers = <NAV MAC>;
			then-layer = <SYS>;
        };
    };

	behaviors {
		shicap: stickyshift_capsword {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&sk LSHFT>, <&caps_word>;
            mods = <MOD_LSFT>;
        };
		spabac: space_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SPACE>, <&kp BSPC>;
            mods = <MOD_LSFT>;
        };
		comsem: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		dotcol: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		queexc: question_exclamation {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		parles: leftparenthesis_lessthan {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp LT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
		pargre: rightparenthesis_greaterthan {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

	combos {
		compatible = "zmk,combos";	
		combo_to_base_layer {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <13 14 15 16>;
			bindings = <&to BASE>;
		};
		compatible = "zmk,combos";
		combo_to_game_layer {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <3 14 16 25>;
			bindings = <&to GAME>;
		};
		compatible = "zmk,combos";
		combo_backspace {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <38 39>;
			bindings = <&kp BSPC>;
		};
		compatible = "zmk,combos";
		combo_copy {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <2 4>;
			bindings = <&copy>;
		};
		compatible = "zmk,combos";
		combo_paste {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <14 16>;
			bindings = <&paste>;
		};
		compatible = "zmk,combos";
		combo_cut {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <26 28>;
			bindings = <&cut>;
		};
		compatible = "zmk,combos";
		combo_undo {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <13 16>;
			bindings = <&undo>;
		};
		compatible = "zmk,combos";
		combo_redo {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <19 22>;
			bindings = <&redo>;
		};
		compatible = "zmk,combos";
		combo_enter {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <7 9>;
			bindings = <&kp RET>;
		};
		compatible = "zmk,combos";
		combo_tab {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <19 21>;
			bindings = <&kp TAB>;
		};
		compatible = "zmk,combos";
		combo_escape {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <31 33>;
			bindings = <&kp ESC>;
		};
		compatible = "zmk,combos";
		combo_parles {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <15 16>;
			bindings = <&parles>;
		};
		compatible = "zmk,combos";
		combo_pargre {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <19 20>;
			bindings = <&pargre>;
		};
		compatible = "zmk,combos";
		combo_hyphen {
			timeout-ms = <50>;
			require-prior-idle-ms = <100>;
			key-positions = <3 4>;
			bindings = <&kp MINUS>;
		};
	};
	
    macros {
        copy: CTRL_C {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp C>
                , <&macro_release &kp LCTRL>
                ;
        };
        paste: CTRL_V {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp V>
                , <&macro_release &kp LCTRL>
                ;
        };
        cut: CTRL_X {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp X>
                , <&macro_release &kp LCTRL>
                ;
        };	
        undo: CTRL_Z {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp Z>
                , <&macro_release &kp LCTRL>
                ;
        };
        redo: CTRL_Y {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LCTRL>
                , <&macro_tap &kp Y>
                , <&macro_release &kp LCTRL>
                ;
        };
	};
};

/ {
        keymap {
                compatible = "zmk,keymap";

                base_layer {
                        display-name = "Base";
                        bindings = <
	&kp LALT &kp Q &kp W &kp E &kp R &kp T &kp Y &kp U &kp I &kp O &kp P &kp RALT
	&sk LSHFT &kp A &kp S &kp D &kp F &kp G &kp H &kp J &kp K &kp L &kp SQT &sk RSHFT
	&kp LCTRL &kp Z &kp X &kp C &kp V &kp B &kp N &kp M &comsem &dotcol &queexc &kp RCTRL
    &mo NAV &mo NUM &shicap &spabac &mo FUN &mo MAC
                        >;
                };
				number_layer {
                        display-name = "Num";
                        bindings = <
	___ XXX &kp N1 &kp N2 &kp N3 XXX XXX &kp KP_N1 &kp KP_N2 &kp KP_N3 XXX ___
	___ &kp N0 &kp N4 &kp N5 &kp N6 XXX XXX &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_N0 ___
	___ XXX &kp N7 &kp N8 &kp N9 XXX XXX &kp KP_N7 &kp KP_N8 &kp KP_N9 XXX ___
	___ ___ ___ ___ &kp RGUI ___
                        >;				
                };
				navigation_layer {
                        display-name = "Nav";
                        bindings = <
	___ &kp F1 &kp F2 &kp F3 &kp F4 &kp C_NEXT &kp C_VOL_UP &kp F13 &kp F14 &kp F15 &kp F16 ___
	___ &kp F5 &kp F6 &kp F7 &kp F8 &kp C_PP &kp C_MUTE &kp F17 &kp F18 &kp F19 &kp F20 ___
	___ &kp F9 &kp F10 &kp F11 &kp F12 &kp C_PREV &kp C_VOL_DN &kp F21 &kp F22 &kp F23 &kp F24 ___
	___ ___ ___ ___ ___ ___
                        >;
                };				
				function_layer {
                        display-name = "Fun";
                        bindings = <
	___ XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX ___ 
	___ &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 XXX XXX &bt BT_SEL 4 &out OUT_BLE &out OUT_USB &bt BT_CLR ___
	___ XXX XXX XXX XXX XXX XXX XXX XXX XXX XXX ___
	___ &kp LGUI ___ ___ ___ ___
                        >;
				};
				macro_layer {
                        display-name = "Mac";
                        bindings = <
	___ &kp LALT &kp Q &kp S &kp E &kp R &kp Y &kp U &kp I &kp O &kp P ___
	___ &kp LSHFT &kp A &kp W &kp D &kp F &kp H &kp J &kp K &kp L &kp SEMI ___
	___ &kp LCTRL &kp Z &kp X &kp C &kp V &kp N &kp M &kp COMMA &kp DOT &kp FSLH ___
	___ ___ ___ ___ ___ ___
                        >;
				};
				system_layer {
                        display-name = "Sys";
                        bindings = <
	___ &kp N1 &kp N2 &kp DOWN &kp N3 &kp N4 XXX XXX XXX XXX XXX ___
	___ &kp RET &kp LEFT &kp UP &kp RIGHT &kp N5 XXX XXX XXX XXX XXX ___
	___ &kp N0 &kp N9 &kp N8 &kp N7 &kp N6 XXX XXX XXX XXX XXX ___
	___ XXX XXX XXX XXX ___
                        >;
				};
                game_layer {
                        display-name = "Game";
                        bindings = <
	&kp ESC &kp T &kp Q &kp W &kp E &kp R &kp Y &kp U &kp I &kp O &kp P XXX
	&kp TAB &kp G &kp A &kp S &kp D &kp F &kp H &kp J &kp K &kp L &kp SEMI XXX
	&kp LCTRL &kp LSHFT &kp Z &kp X &kp C &kp V &kp N &kp M &kp COMMA &kp DOT &kp FSLH XXX
	&mo GFUN &kp LALT &kp SPACE &kp B XXX XXX
                        >;
                };
                game_function_layer {
                        display-name = "G Fun";
                        bindings = <
	&kp PSCRN &kp F1 &kp F2 &kp F3 &kp F4 &kp F21 XXX XXX XXX XXX XXX XXX
	&kp LGUI &kp F5 &kp F6 &kp F7 &kp F8 &kp F22 XXX XXX XXX XXX XXX XXX
	&kp F24 &kp F9 &kp F10 &kp F11 &kp F12 &kp F23 XXX XXX XXX XXX XXX XXX
	___ ___ XXX XXX XXX XXX
                        >;
                };
		};
};